# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test
      - name: Cache
        uses: actions/cache@v3.3.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: 
          # An explicit key for restoring and saving the cache
          key: 
          # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
          restore-keys: # optional
          # The chunk size used to split up large files during upload, in bytes
          upload-chunk-size: # optional
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          enableCrossOsArchive: # optional, default is false
          # Fail the workflow if cache entry is not found
          fail-on-cache-miss: # optional, default is false
          # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
          lookup-only: # optional, default is false
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: # optional
          # The path to the `.java-version` file. See examples of supported syntax in README file
          java-version-file: # optional
          # Java distribution. See the list of supported distributions in README file
          distribution: 
          # The package type (jdk, jre, jdk+fx, jre+fx)
          java-package: # optional, default is jdk
          # The architecture of the package (defaults to the action runner's architecture)
          architecture: # optional
          # Path to where the compressed JDK is located
          jdkFile: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: # optional
          # ID of the distributionManagement repository in the pom.xml file. Default is `github`
          server-id: # optional, default is github
          # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
          server-username: # optional, default is GITHUB_ACTOR
          # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
          server-password: # optional, default is GITHUB_TOKEN
          # Path to where the settings.xml file will be written. Default is ~/.m2.
          settings-path: # optional
          # Overwrite the settings.xml file if it exists. Default is "true".
          overwrite-settings: # optional, default is true
          # GPG private key to import. Default is empty string.
          gpg-private-key: # optional
          # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
          gpg-passphrase: # optional
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          cache: # optional
          # Workaround to pass job status to post job step. This variable is not intended for manual setting
          job-status: # optional, default is ${{ job.status }}
          # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
          mvn-toolchain-id: # optional
          # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
          mvn-toolchain-vendor: # optional
      - name: Setup Go environment
        uses: actions/setup-go@v4.1.0
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges. Be sure to enclose this option in single quotation marks.
          go-version: # optional
          # Path to the go.mod or go.work file.
          go-version-file: # optional
          # Set this option to true if you want the action to always check for the latest available version that satisfies the version spec
          check-latest: # optional
          # Used to pull Go distributions from go-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify whether caching is needed. Set to true, if you'd like to enable caching.
          cache: # optional, default is true
          # Used to specify the path to a dependency file - go.sum
          cache-dependency-path: # optional
          # Target architecture for Go to use. Examples: x86, x64. Will use system architecture by default.
          architecture: # optional
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
            # Artifact name
            name: # optional, default is artifact
            # A file, directory or wildcard pattern that describes what to upload
            path: 
            # The desired behavior if no files are found using the provided path.
        Available Options:
          warn: Output a warning but do not fail the action
          error: Fail the action with an error message
          ignore: Do not output any warnings or errors, the action does not fail
        
            if-no-files-found: # optional, default is warn
            # Duration after which artifact will expire in days. 0 means using default retention.
        Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
        
            retention-days: # optional
          
